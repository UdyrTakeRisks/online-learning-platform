Assign2-DS


CREATE TABLE instructor (
    instructor_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    affiliation VARCHAR(255),
   	years_experience INT,
   	bio TEXT
);

CREATE TABLE course (
    course_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    duration INT NOT NULL,
    category VARCHAR(255) NOT NULL,
   	capacity INT,
   	enrolled_students INT,
   	instructor_id INT,
   	FOREIGN KEY (instructor_id) REFERENCES instructor(instructor_id)
);

CREATE TABLE student (
    student_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    affiliation VARCHAR(255),
   	bio TEXT,
   	location TEXT
);

CREATE TABLE course_review (
    review_id INT PRIMARY KEY AUTO_INCREMENT,
    student_id INT,
    course_id INT,
    rating DOUBLE,
    review_list TEXT,
    FOREIGN KEY (student_id) REFERENCES student(student_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (course_id) REFERENCES course(course_id) ON DELETE CASCADE ON UPDATE CASCADE,
    CHECK (rating >= 0 AND rating <= 5)
);


// into testcenterDB
CREATE TABLE testcenter (
    center_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) UNIQUE NOT NULL,
    email VARCHAR(255) UNIQUE,
    password VARCHAR(255) NOT NULL,
    bio TEXT
);

// into testcenterDB
CREATE TABLE branch (
    branch_id INT PRIMARY KEY AUTO_INCREMENT,
    center_id INT,
    name VARCHAR(255) UNIQUE NOT NULL,
    address TEXT,
   	location TEXT,
   	FOREIGN KEY (center_id) REFERENCES testcenter(center_id)
);


CREATE TABLE exam (
    exam_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) UNIQUE NOT NULL,
    duration INT,
   	date TEXT,
   	grade DOUBLE
);


CREATE TABLE student_course (
    id INT PRIMARY KEY AUTO_INCREMENT,
    student_id INT,
    course_id INT,
    FOREIGN KEY (student_id) REFERENCES student(student_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (course_id) REFERENCES course(course_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE student_exam (
    id INT PRIMARY KEY AUTO_INCREMENT,
    student_id INT,
    exam_id INT,
    FOREIGN KEY (student_id) REFERENCES student(student_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (exam_id) REFERENCES exam(exam_id) ON DELETE CASCADE ON UPDATE CASCADE
    
);

CREATE TABLE testcenter_exam (
    id INT PRIMARY KEY AUTO_INCREMENT,
    center_id INT,
    exam_id INT,
    FOREIGN KEY (exam_id) REFERENCES exam(exam_id) ON DELETE CASCADE ON UPDATE CASCADE
);


CREATE TABLE course_enrollment (
    enrollment_id INT AUTO_INCREMENT PRIMARY KEY,
    student_id INT,
    course_id INT,
    instructor_id INT, // should be added
    student_name VARCHAR(255),
    course_name VARCHAR(255),
    status ENUM('accepted', 'rejected', 'pending') DEFAULT 'pending',
    FOREIGN KEY (student_id) REFERENCES student(student_id),
    FOREIGN KEY (course_id) REFERENCES course(course_id),
    FOREIGN KEY (instructor_id) REFERENCES instructor(instructor_id) // should be added
);

// not done

CREATE TABLE course_publish (
    publish_id INT AUTO_INCREMENT PRIMARY KEY,
    instructor_id INT,
    course_id INT,
    instructor_name VARCHAR(255),
    course_name VARCHAR(255),
    status ENUM('accepted', 'rejected') DEFAULT 'pending',
    FOREIGN KEY (instructor_id) REFERENCES instructor(instructor_id),
    FOREIGN KEY (course_id) REFERENCES course(course_id)
);


CREATE TABLE generated_credentials (
    credential_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL
);


